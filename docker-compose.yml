services:
  # Local Blockchain Node
  blockchain:
    image: node:18
    working_dir: /app
    volumes:
      - ./stock-token-exchange:/app
    # Install dependencies and start Hardhat node without deploying.
    # The 'deployer' service handles cleaning and deployment.
    command: >
      bash -c "npm install && exec npx hardhat node --no-deploy"
    ports:
      - "8545:8545"
    networks:
      - stock-exchange-network
    environment: # Add this environment section
      - MINT_TEST_TOKENS=true # To make logs less confusing

  # Smart Contract Deployment Service
  deployer:
    image: node:18
    working_dir: /app/stock-token-exchange # Set working dir to the project root
    volumes:
      - ./stock-token-exchange:/app/stock-token-exchange # Mount the project dir
      - ./.env:/app/.env # Mount root .env if needed by hardhat config
    # Install dependencies, clean cache, wait for blockchain, deploy contracts and update .env
    command: >
      bash -c "
        set -e # Exit immediately if a command exits with a non-zero status.
        apt-get update && apt-get install -y jq curl && \\
        echo 'OS dependencies installed.' && \\
        npm install && \\
        echo 'Node.js dependencies installed.' && \\
        npx hardhat clean && \\
        echo 'Cleaned previous Hardhat artifacts and cache.' && \\
        echo 'Explicitly clearing contents of deployments/localhost/ before deployment...' && \\
        mkdir -p deployments/localhost && rm -rf deployments/localhost/* && \\
        echo '31337' > deployments/localhost/.chainId && \\
        echo 'Created .chainId file in deployments/localhost/' && \\
        echo 'Contents of deployments/localhost/ after clearing (should be empty):' && \\
        ls -l deployments/localhost/ && \\
        echo 'Waiting for blockchain node to be responsive...' && \\
        ATTEMPTS=0 && \\
        MAX_ATTEMPTS=30 && \\
        while ! curl -sf -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_chainId\",\"params\":[],\"id\":1}' -H 'Content-Type: application/json' http://blockchain:8545 > /dev/null; do \
          ATTEMPTS=$$((ATTEMPTS + 1)) && \
          if [ $$ATTEMPTS -ge $$MAX_ATTEMPTS ]; then \
            echo 'Blockchain not responsive after $$MAX_ATTEMPTS attempts. Exiting.' >&2; \
            exit 1; \
          fi && \
          echo 'Blockchain not yet responsive (attempt $$ATTEMPTS/$$MAX_ATTEMPTS), sleeping for 2s...'; \
          sleep 2; \
        done && \
        echo 'Blockchain is responsive.' && \
        npx hardhat deploy --network localhost && \
        echo 'Hardhat deployment finished. Attempting to extract addresses...' && \
        echo 'Listing contents of deployments/localhost/ before jq extraction:' && \
        ls -l deployments/localhost/ || echo 'Could not list deployments/localhost/' >&2 && \
        EXCHANGE_ADDRESS=$$(jq -r .address deployments/localhost/Exchange.json 2>/dev/null || echo '') && \
        TOKEN_ADDRESS=$$(jq -r .address deployments/localhost/StockToken.json 2>/dev/null || echo '') && \
        if [ -z \"$$EXCHANGE_ADDRESS\" ] || [ \"$$EXCHANGE_ADDRESS\" == \"null\" ] || [ -z \"$$TOKEN_ADDRESS\" ] || [ \"$$TOKEN_ADDRESS\" == \"null\" ]; then \
          echo 'Error: Failed to extract contract addresses from deployment artifacts.' >&2; \
          echo 'Attempting to display contents of JSON files (if they exist):' >&2; \
          echo '--- Exchange.json ---' >&2; \
          cat deployments/localhost/Exchange.json || echo 'Exchange.json not found or unreadable.' >&2; \
          echo '--- StockToken.json ---' >&2; \
          cat deployments/localhost/StockToken.json || echo 'StockToken.json not found or unreadable.' >&2; \
          exit 1; \
        fi && \
        echo \"Extracted Exchange Address: $$EXCHANGE_ADDRESS\" && \
        echo \"Extracted Token Address: $$TOKEN_ADDRESS\" && \
        ./update-env.sh --exchange-address \"$$EXCHANGE_ADDRESS\" --token-address \"$$TOKEN_ADDRESS\" && \
        echo 'Finished updating .env files via update-env.sh.'
      "
    depends_on:
      blockchain:
        condition: service_started
    networks:
      - stock-exchange-network
    environment:
      - HARDHAT_NETWORK=localhost # Ensure deploy script uses localhost
      - MINT_TEST_TOKENS=true # Mint test tokens to Bob

  # Backend Server (Flask)
  backend:
    build:
      context: ./stock-token-exchange/backend # Corrected context path
      dockerfile: Dockerfile
    volumes:
      - ./stock-token-exchange/backend:/app/backend # Mount backend source
      - ./stock-token-exchange/deployments:/app/deployments # Mount deployments for ABIs
      - ./.env:/app/.env # Mount the root .env file directly
    working_dir: /app/backend
    ports:
      - "5001:5001"
    depends_on:
      blockchain:
        # Ensure blockchain is ready before backend starts
        condition: service_started # Or service_healthy if healthcheck is added
      deployer:
        # Ensure contracts are deployed and .env updated
        condition: service_completed_successfully # Wait for deployer script to finish
    networks:
      - stock-exchange-network
    secrets:
      # Define secret usage for backend
      - admin_private_key
    environment:
      # Pass necessary env vars from the root .env AND override NODE_URL
      - FLASK_APP=${FLASK_APP:-server.py} # Use from root .env or default
      - FLASK_DEBUG=${FLASK_DEBUG:-1} # Use from root .env or default
      - NODE_URL=http://blockchain:8545 # Override NODE_URL for container network
      - EXCHANGE_CONTRACT_ADDRESS=${EXCHANGE_CONTRACT_ADDRESS} # From root .env (updated by deployer)
      - STOCK_TOKEN_ADDRESS=${STOCK_TOKEN_ADDRESS} # From root .env (updated by deployer)
      - ADMIN_PRIVATE_KEY_PATH=/run/secrets/admin_private_key # Path to secret file
      - MAX_ORDERS_PER_BATCH=${MAX_ORDERS_PER_BATCH:-100} # Use from root .env or default
      - DEPLOYMENT_PATH=/app/deployments # Tell backend where to find ABIs

  # Frontend Server (React)
  frontend:
    build:
      context: ./stock-token-exchange/frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./stock-token-exchange/frontend:/app # Mount the frontend source code
      - /app/node_modules # Avoid overwriting node_modules from host
      # Mount the deployments directory from the root to be accessible by the export script
      - ./stock-token-exchange/deployments:/app/deployments_src
      # Mount the frontend scripts directory
      - ./stock-token-exchange/frontend/scripts:/app/scripts
      # Mount tsconfig from parent for ts-node
      - ./stock-token-exchange/tsconfig.json:/app/tsconfig.json
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - FAST_REFRESH=false
      - REACT_FAST_REFRESH=false
    depends_on:
      backend: # Ensures backend service has started
        condition: service_started 
      deployer: # Ensure deployments are completed and .env updated
        condition: service_completed_successfully
    # Run the export script first, then start react
    # Use sh -c to run multiple commands
    # Use relative paths assuming working_dir is /app
    command: >
      sh -c "
        echo \'--- Ensuring frontend/src/deployments directory exists ---\' &&
        mkdir -p /app/src/deployments &&
        echo \'--- Running deployment export script (generate-deployments.js) ---\' && 
        node ./scripts/generate-deployments.js && 
        echo \'--- Finished deployment export script ---\' && 
        npm start
      "
    working_dir: /app # Set working directory inside container

  # Cartesi Environment (for building/running the machine)
  cartesi:
    # Use an image with Cartesi tools
    image: ${CARTESI_PLAYGROUND_IMAGE:-cartesi/playground:0.5.0}
    volumes:
      - ./stock-token-exchange:/app
      - ./.env:/app/.env
    working_dir: /app
    # Example command: Build the machine then keep container alive
    command: >
      bash -c "echo 'Cartesi environment container started.' && \
               echo 'To build the machine, run: docker-compose exec cartesi bash -c \"cd cartesi-machine && ./build-machine.sh\"' && \
               echo 'After building, update the template hash with: ./update-env.sh --template-hash YOUR_TEMPLATE_HASH' && \
               tail -f /dev/null"
    networks:
      - stock-exchange-network

networks:
  stock-exchange-network:
    driver: bridge

secrets:
  admin_private_key:
    file: ./secrets/admin_private_key.txt
