# Production Dockerfile for Frontend Service
FROM node:18-alpine AS builder

# Build arguments for proxy support
ARG PROXY_URL=""
ARG HTTP_PROXY=""
ARG HTTPS_PROXY=""
ARG http_proxy=""
ARG https_proxy=""
ARG NPM_TIMEOUT=300000
ARG NPM_RETRIES=10
ARG NO_PROXY=localhost,127.0.0.1
ARG no_proxy=localhost,127.0.0.1

# Set environment variables - both uppercase and lowercase for compatibility
ENV HTTP_PROXY=$HTTP_PROXY \
    HTTPS_PROXY=$HTTPS_PROXY \
    http_proxy=${http_proxy:-$HTTP_PROXY} \
    https_proxy=${https_proxy:-$HTTPS_PROXY} \
    PROXY_URL=$PROXY_URL \
    NO_PROXY=$NO_PROXY \
    no_proxy=${no_proxy:-$NO_PROXY}

# Set working directory
WORKDIR /app

# Configure npm with proxy fallback
RUN if [ -n "$HTTP_PROXY" ]; then \
        echo "Configuring npm with proxy $HTTP_PROXY"; \
        npm config set proxy $HTTP_PROXY; \
        npm config set https-proxy $HTTPS_PROXY; \
        npm config set registry http://registry.npmjs.org/; \
        npm config set strict-ssl false; \
    fi && \
    npm config set fetch-timeout ${NPM_TIMEOUT} && \
    npm config set fetch-retry-mintimeout 10000 && \
    npm config set fetch-retry-maxtimeout 60000 && \
    npm config set fetch-retries ${NPM_RETRIES} && \
    npm config set maxsockets 20

# Copy package files
COPY package*.json ./

# Install dependencies with enhanced retry logic and package-lock.json fix
RUN set -e; \
    attempt=1; \
    max_attempts=4; \
    while [ $attempt -le $max_attempts ]; do \
        echo "NPM install attempt $attempt/$max_attempts"; \
        if npm ci --only=production --ignore-scripts --verbose; then \
            echo "NPM install successful"; \
            break; \
        elif [ $attempt -eq 1 ]; then \
            echo "npm ci failed, likely package-lock.json mismatch (ethers v5/v6). Fixing..."; \
            rm -f package-lock.json; \
            npm install --only=production --ignore-scripts --verbose; \
            if [ $? -eq 0 ]; then \
                echo "NPM install successful after fixing lock file"; \
                break; \
            fi; \
        elif [ $attempt -eq 2 ] && [ -n "$HTTP_PROXY" ]; then \
            echo "Proxy failed, trying direct connection..."; \
            npm config delete proxy || true; \
            npm config delete https-proxy || true; \
            npm config set registry "https://registry.npmjs.org/"; \
            npm cache clean --force; \
        elif [ $attempt -eq $max_attempts ]; then \
            echo "All npm install attempts failed"; \
            exit 1; \
        else \
            echo "NPM install failed, retrying in $((attempt * 10)) seconds..."; \
            sleep $((attempt * 10)); \
        fi; \
        attempt=$((attempt + 1)); \
    done

# Clean up proxy configuration for build
RUN if [ -n "$PROXY_URL" ]; then \
        npm config delete proxy || true; \
        npm config delete https-proxy || true; \
        unset HTTP_PROXY HTTPS_PROXY; \
    fi

# Copy source code
COPY . .

# Build the application
RUN npm run build

# Production stage with nginx
FROM nginx:alpine AS production

# Create non-root user
RUN addgroup -S appuser || true && \
    adduser -D -S -s /bin/sh -G appuser appuser

# Copy nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf
COPY nginx-default.conf /etc/nginx/conf.d/default.conf

# Copy built app from builder stage
COPY --from=builder /app/build /usr/share/nginx/html

# Create necessary directories and set permissions
RUN mkdir -p /var/cache/nginx /var/log/nginx /var/run/nginx && \
    chown -R appuser:appuser /var/cache/nginx /var/log/nginx /var/run/nginx /usr/share/nginx/html /etc/nginx

# Switch to non-root user
USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:3000/ || exit 1

# Expose port
EXPOSE 3000

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
